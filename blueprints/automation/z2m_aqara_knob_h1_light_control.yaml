blueprint:
  name: Aqara Rotary Knob H1 – Adjustable Brightness & Color Temperature (Z2M)
  description: |-
    ## Supporting
      - Aqara Rotary Knob H1 (wireless) [ZNXNKG02LM](https://www.zigbee2mqtt.io/devices/ZNXNKG02LM.html)
      - Supports Zigbee2MQTT versions, including 2.0.0 and later updates. (It is expected to work on lower versions as well.)

    ## Prerequisites
      - Requires at least **Home Assistant Core `2024.08`** version.
      - The knob only works when connected via `Zigbee2MQTT`.
      - The operation mode of the knob must be set to `event`. It is unknown whether it works in `command` mode.
      
      - The controlled lights can be connected through any platform. (Color temperature adjustment in Kelvin must be supported.)
      - The MQTT integration must be installed in Home Assistant.
      
      - The default `entity_id` of the H1 Knob must not be manually modified.
        For example, if the friendly name of the H1 Knob in the Zigbee2MQTT UI is "`Aqara Knob`", the related entities should remain as:
            
            sensor.aqara_knob_action_rotation_button_state
            sensor.aqara_knob_action_rotation_percent
            sensor.aqara_knob_action_rotation_angle
        These `entity_id` must be preserved for proper functionality.
        If you have manually modified the `entity_id`, this blueprint will **NOT WORK**.
        Please revert them to their original values for proper functional

    ## Customizing Options

      - It's a bit unfortunate to forgo the UI dropdown to support Jinja2 templates, but this allows setting `target_light` dynamically, such as using the state of an `input_select` or other flexible configurations.
        If you don't need a template, simply enter the `entity_id` of the light directly. (Example: light.my_bulb)

      - If Restore Brightness is disabled (default), turning the knob `right` to turn on the Target Light will start at the `minimum brightness` and increase based on the knob rotation.
      
      - If the Restore Brightness option is enabled, turning the knob `right` to turn on the Target Light while it is off will restore its previous brightness state (if supported by the light).

      - You can set the `transition time` for smooth brightness and color temperature adjustments. The default value is `0.4s`, as it matches the default transition time of my Hue bulbs.

      - You can adjust the amount of color temperature change per tick of the knob.
      
      - You can adjust the brightness percentage change per tick of the knob.
      
      - Added functionality to set the starting color temperature via the `Default Color Temp Setting` when adjusting the light's color temperature by pressing and turning the light (instead of using the color temperature mode). The default value is set to `4000k`

      - You can set the minimum and maximum color temperature values to limit the physically adjustable range. If you don’t want any restrictions, you can ignore this setting.

    ## User Manual
      1. If you haven’t changed the topic in Zigbee2MQTT, you don’t need to modify the base topic. Leave it as the `default` value

      2. Type in the `friendly name` of the knob exactly as it appears in the `Zigbee2MQTT Web UI`
         Ensure that uppercase letters, spaces, and underscores match the exact formatting used in Zigbee2MQTT.

      3. Ensure that all prerequisites are fully met before proceeding.

      4. Adjust the Knob Action Config settings according to your needs, following the options listed in Customizing Options.

    ## How It Works
    *Press Action*
      - `Single`, `Double`, and `Hold` actions can all be customized in the press action section.
      - The `Release` action DOES NOT work in this blueprint.

    *Knob Action*
      - Turning the knob right without pressing increases brightness (+), Turning the knob left without pressing decreases brightness (-).
      - Turning the knob right while pressing increases the color temperature (cooler), Turning the knob left while pressing decreases the color temperature (warmer).

    ## Customized by n3v
      - Removed `knob` and `translate_friendly_name` inputs.
      - Added direct input fields for related sensor entity_ids:
          • Pressed State Sensor
          • Brightness Rotation Sensor
          • Color Temperature Rotation Sensor
      - Replaced base/topic separation with a single full MQTT topic input.
      - Removed automatic entity_id generation based on friendly name.
      - Cleaned up unused variables and template logic.
      - All descriptions and instructions rewritten in English.
      
  domain: automation

  input:
    full_mqtt_topic:
      name: Full MQTT Topic
      description: >
        Full MQTT topic Zigbee2MQTT uses for this knob.
        Example: `zigbee2mqtt/Aqara_Knob/action`
        Must exactly match what's shown in Zigbee2MQTT logs or MQTT Explorer.
      default: zigbee2mqtt/Aqara_Knob/action

    sensor_pressed:
      name: Sensor - Button Press State
      description: Entity ID of the sensor showing whether knob is pressed or released.
      selector:
        entity:
          domain: sensor

    sensor_brightness:
      name: Sensor - Rotation Brightness Percent
      description: Entity ID of the sensor representing rotation percent (for brightness).
      selector:
        entity:
          domain: sensor

    sensor_color_temp:
      name: Sensor - Rotation Angle
      description: Entity ID of the sensor representing rotation angle (for color temp).
      selector:
        entity:
          domain: sensor

    target_light:
      name: Target Light
      description: Select the light entity to control brightness and color temperature.
      selector:
        template: {}

    restore_brightness:
      name: Restore Brightness
      description: Restore previous brightness when turning on light with right-rotation if the light is off.
      default: false
      selector:
        boolean:

    color_temp_base:
      name: Default Color Temp setting
      default: 4000
      selector:
        number:
          min: 1000
          max: 10000
          unit_of_measurement: "K"

    press_action:
      name: Press Action
      icon: mdi:gesture-tap-button
      collapsed: false
      input:
        action_single:
          name: Single Action
          default: []
          selector:
            action: {}
        action_double:
          name: Double Action
          default: []
          selector:
            action: {}
        action_hold:
          name: Hold Action
          default: []
          selector:
            action: {}

    knob_action:
      name: Knob Action Config
      icon: mdi:knob
      collapsed: true
      input:
        transition_time:
          name: TRANSITION TIME
          default: 0.4
          selector:
            number:
              min: 0.0
              max: 20.0
              step: 0.1
              unit_of_measurement: s
              mode: slider

        brightness_stepsize:
          name: Brightness Stepsize
          default: 4
          selector:
            number:
              min: 1
              max: 100
              step: 1
              unit_of_measurement: /2 = %
              mode: slider

        color_temp_stepsize:
          name: Color Temp Stepsize
          default: 5.0
          selector:
            number:
              min: 1
              max: 20
              step: 0.1
              unit_of_measurement: num
              mode: slider

        color_temp_min:
          name: Min Color Temp Kelvin
          default: 1000
          selector:
            number:
              min: 1000
              max: 10000
              unit_of_measurement: "K"

        color_temp_max:
          name: Max Color Temp Kelvin
          default: 10000
          selector:
            number:
              min: 1000
              max: 10000
              unit_of_measurement: "K"

mode: parallel
max: 100
max_exceeded: silent
trace:
  stored_traces: 20

trigger:
  - platform: mqtt
    topic: !input full_mqtt_topic

variables:
  ACTION: '{{ trigger.payload }}'
  TARGET_LIGHT: !input target_light
  BRIGHTNESS_STEPSIZE: !input brightness_stepsize
  TEMP_STEPSIZE: !input color_temp_stepsize
  RESTORE_BRIGHTNESS: !input restore_brightness
  TEMP_BASE: !input color_temp_base
  TEMP_MIN: !input color_temp_min
  TEMP_MAX: !input color_temp_max
  TRANSITION_TIME: !input transition_time

  SENSOR_PRESSED: !input sensor_pressed
  SENSOR_BRIGHT_SIZE: !input sensor_brightness
  SENSOR_TEMP_SIZE: !input sensor_color_temp

  STATES_PRESSED: "{{ states(SENSOR_PRESSED) }}"
  STATES_BRIGHT_SIZE: "{{ ((states(SENSOR_BRIGHT_SIZE) | float(1) / 3) * BRIGHTNESS_STEPSIZE * 2.54) | round(0) }}"
  STATES_TEMP_SIZE: "{{ states(SENSOR_TEMP_SIZE) | float(0) * TEMP_STEPSIZE }}"

action:
  - choose:
      - conditions: "{{ ACTION != 'stop_rotating' }}"
        sequence:
          - choose:
              - conditions: "{{ ACTION == 'single' }}"
                sequence: !input action_single
              - conditions: "{{ ACTION == 'double' }}"
                sequence: !input action_double
              - conditions: "{{ ACTION == 'hold' }}"
                sequence: !input action_hold
              - conditions: "{{ ACTION in ['start_rotating', 'rotation'] }}"
                sequence:
                  - choose:
                      - conditions: "{{ STATES_PRESSED == 'released' }}"
                        sequence:
                          - if:
                              - condition: template
                                value_template: "{{ states(TARGET_LIGHT) == 'off' and RESTORE_BRIGHTNESS and STATES_BRIGHT_SIZE > 0 }}"
                            then:
                              - service: light.turn_on
                                target:
                                  entity_id: "{{ TARGET_LIGHT }}"
                                data:
                                  transition: "{{ TRANSITION_TIME }}"
                            else:
                              - service: light.turn_on
                                target:
                                  entity_id: "{{ TARGET_LIGHT }}"
                                data:
                                  transition: "{{ TRANSITION_TIME }}"
                                  brightness_step: "{{ STATES_BRIGHT_SIZE }}"
                      - conditions: "{{ STATES_PRESSED == 'pressed' }}"
                        sequence:
                          - if:
                              - condition: template
                                value_template: "{{ states(TARGET_LIGHT) == 'off' and STATES_TEMP_SIZE > 0 }}"
                            then:
                              - service: light.turn_on
                                target:
                                  entity_id: "{{ TARGET_LIGHT }}"
                                data:
                                  transition: "{{ TRANSITION_TIME }}"
                            else:
                              - variables:
                                  COLOR_TEMP_MIN: "{{ max(TEMP_MIN, state_attr(TARGET_LIGHT, 'min_color_temp_kelvin')) }}"
                                  COLOR_TEMP_MAX: "{{ min(TEMP_MAX, state_attr(TARGET_LIGHT, 'max_color_temp_kelvin')) }}"
                                  SAFE_TEMP_BASE: "{{ min(COLOR_TEMP_MAX, max(COLOR_TEMP_MIN, TEMP_BASE | int)) }}"
                                  CURRENT_TEMP: >-
                                    {% if state_attr(TARGET_LIGHT, 'color_temp_kelvin') is not none %}
                                      {{ state_attr(TARGET_LIGHT, 'color_temp_kelvin') | int }}
                                    {% else %}
                                      {{ SAFE_TEMP_BASE }}
                                    {% endif %}
                              - service: light.turn_on
                                target:
                                  entity_id: "{{ TARGET_LIGHT }}"
                                data:
                                  transition: "{{ TRANSITION_TIME }}"
                                  kelvin: "{{ min(COLOR_TEMP_MAX, max(COLOR_TEMP_MIN, CURRENT_TEMP + STATES_TEMP_SIZE)) }}"
                                  
